# This is the language of our project.
language: php

# This tells Travis CI to use its new architecture.  Everything is better!
sudo: required

addons:
  firefox: "47.0.1"
  postgresql: "9.3"
  apt:
    packages:
      - oracle-java8-installer
      - oracle-java8-set-default
      - chromium-chromedriver

# This tells Travis CI to cache Composer's cache.  Speeds up build times.
cache:
  directories:
    - $HOME/.composer/cache
    - $HOME/.npm

# Determines which versions of PHP to test our project against.  Each version listed
# here will create a separate build and run the tests against that version of PHP.
# WARNING, PHP7 only works in Moodle 3.0.1 or later!
php:
 - 5.6
 - 7.0
 - 7.1

# This section sets up the environment variables for the build.
env:
 global:
# This line determines which version of Moodle to test against.
  - MOODLE_BRANCH=master
# This matrix is used for testing against multiple databases.  So for each version of
# PHP being tested, one build will be created for each database listed here.  EG: for
# PHP 5.4, one build will be created using PHP 5.4 and pgsql.  In addition, another
# build will be created using PHP 5.4 and mysqli.
 matrix:
  - DB=pgsql
  - DB=mysqli

# This section defines who's going to receive the notifications!
notifications:
  email:
    recipients:
        # I'm going to receive all reports, no matter what status they have or had (my encrypted e-mail-adress)!
      - secure: "lF59kKnldwR/nN9PexQNxFHUonRTDjzEprNaU1AmpzppLfB55RczckpUfAOv65WzoooU73gPHGd87QyyemhgIIBz8xYYftx/nSqcu8dmA1sZJ2Pw2kZItmdost+KfTssqMwXzyg7ud8BnXlTIcpp2cnLszP4LUSlfblVup9cBQ5WmQkJMIxVdgxffCZbwj3SZN4E6rr2LuzwO3eQh7EfNqBSeizFBXdPVNAe2gyirdDHj7vRC6lGgow9J4k/6FCEZltVk9nhZdmu1rWnPh3AJ0nPJNf2lyM2AmaLz2fyqXcri7EwyhKXBUY0tr/j0XnVrlCAYvlXrrDD5iOmGlMN2uvpdlT/qhrwJ9LJrfve9nSXScsTwsW4yo+5birvfFTo86K9VWvo1ZAMdoLLJX3x/Dth/3D7Ct6II6WmUDryn7sxISaE1kmrAJ3Y32sS6YITufl8SirL+0/9KiKOclHV+BIsCOMDWVG56AksHPnbCpytPAGajg1JvkLZnVeDWbaPxaKp8zS8CorpMSOPVd8xBOEI+IaL/CWZR/NyiJmLyCoQpkfr8+m7OdUBLtv83r84GAXk+rBLWhk2W56H0BuF457wzu9GVdn8sCrW3NKatfZrE/EMk/ZoFwEe/GvJj4zFZXoa7JoreNnYy5V5ZN5aWd3ntezxvZnqbNVG2hLMOGg="
    on_success: always # default: change
    on_failure: always # default: always
  slack:
    # This is the value "[Slack-Organisation]:[API-Key]#[channel]" just encrypted!
    rooms:
        #travisci channel
      - secure: "VXcSZLFlh4jFZk0yzRZdq3/X7BpvmkjEz+YgE1rAqpJZcoTsI7xQdfG4yPySUkqXq+EJWv8Ttaqj8BLiF4rWosfMSMOPG3kV6LFF2o9IMhncjamK9x/T4sm+w97PnseWxzWlXxeQAczLjNn6a34UxyWM9DVjW/UNDNyFAsRo1/j+/jTxiKZ2ZtZ6oeDN+fi648zSdw1VPyNvzeUtv4uZ/Y49SirKcJoyODHSoO6vuyEXf1FMxRYE4PqLiEyUkZPBfUVb/dBKhWbJtsn5coLvwPsVICAQpXF9S1j8o10HH3Ks14GeeDFC4N1zXePOjg8E4g4fe3cK2b5FkwKg+pNoIqKUOy974nGDfmmTykFtj6JNDjoS9bVSYjPbCTpNu+82T/69evco6R6l1G/Av56s9LPOSeeyWEfau0+HMG/+FJ/UdPFr9CM7QspNJRXftnkE2nybHz/VKGXvtbMBkTO7TcpR89XElVfu8cWFfMHFypNOpN0ZnYvdY07ZGGpy5cHKm4a5sxcpzI/a8muGGunq7sDXQCjHa5b6FumSJpQTe0xt1oSjocr6am2dbI0aE+E4T+d64kgfv5Vb8h55UilFZofJ8+O/G+7jAAHw7Pior2jL0xOhBkN65OL4Afqba6SHUvG9hUxS7tBAL3YQeTXncUKOvxcvBfD5mjVkOP1wm24="
    on_success: always # default: change
    on_failure: always # default: always

# This lists steps that are run before the installation step.
before_install:
# This disables XDebug which should speed up the build.  One reason to remove this
# line is if you are trying to generate code coverage with PHPUnit.
  - phpenv config-rm xdebug.ini
  - nvm install 8.9
  - nvm use 8.9
# Currently we are inside of the clone of your repository.  We move up two
# directories to build the project.
  - cd ../..
# Update Composer.
  - composer selfupdate
# Install this project into a directory called "ci".
  - composer create-project -n --no-dev --prefer-dist moodlerooms/moodle-plugin-ci ci ^2
# Update the $PATH so scripts from this project can be called easily.
  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"

# This lists steps that are run for installation and setup.
install:
# Run the default install.  The overview of what this does:
#    - Clone the Moodle project into a directory called moodle.
#    - Create Moodle config.php, database, data directories, etc.
#    - Copy your plugin into Moodle.
#    - If your plugin has Behat features, then Behat will be setup.
#    - If your plugin has unit tests, then PHPUnit will be setup.
  - moodle-plugin-ci install

# This lists steps that are run for the purposes of testing.  Any of
# these steps can be re-ordered or removed to your liking.  And of
# course, you can add any of your own custom steps.
script:
# This step lints your PHP files to check for syntax errors.
  - moodle-plugin-ci phplint
# This step runs the PHP Copy/Paste Detector on your plugin. This helps to find
# code duplication.
  - moodle-plugin-ci phpcpd
# This step runs the PHP Mess Detector on your plugin. This helps to find potential
# problems with your code which can result in refactoring opportunities.
  - moodle-plugin-ci phpmd
# This step runs the Moodle Code Checker to make sure that your plugin conforms to the
# Moodle coding standards.  It is highly recommended that you keep this step.
  - moodle-plugin-ci codechecker
# This step runs some light validation on the plugin file structure and code.  Validation can be plugin specific.
  - moodle-plugin-ci validate

  - moodle-plugin-ci savepoints
  - moodle-plugin-ci mustache
  - moodle-plugin-ci grunt

# This step runs the PHPUnit tests of your plugin.  If your plugin has PHPUnit tests,
# then it is highly recommended that you keep this step.
# TODO: remove comments if phpunit tests are ready
  #- moodle-plugin-ci phpunit --coverage-clover
# This step runs the Behat tests of your plugin.  If your plugin has Behat tests, then
# it is highly recommended that you keep this step.
# TODO: remove comments when behat tests are ready
  - moodle-plugin-ci behat --profile default
  - moodle-plugin-ci behat --profile chrome

after_script:
# See: https://github.com/moodlerooms/moodle-plugin-ci/issues/32
  # - ps aux
  - killall -9 php
  - killall -9 java
  - killall -9 Xvfb
  # - ps auxu